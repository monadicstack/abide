// Code generated by Boson - DO NOT EDIT.
//
//   Timestamp: {{ .TimestampString }}
//   Source:    {{ .Path }}
//   Generator: https://github.com/monadicstack/abide
//
package {{ .OutputPackage.Name }}

import (
	"context"

	"github.com/monadicstack/abide/fail"
	"github.com/monadicstack/abide/services"
	"{{.InputPackage.Import }}"
)

{{ $ctx := . }}
{{ $serviceName := .Service.Name }}
{{ $serviceType := (print $ctx.InputPackage.Name "." $serviceName) }}
{{ $serviceFunc := (print .Service.Name "Server") }}

// {{ $serviceFunc }} accepts your "real" {{ $serviceName }} instance (the thing that really does
// the work), and returns a set of endpoint routes which allow this service to be consumed
// via the gateways/listeners you configure in main().
//
//	// Example
//	serviceHandler := {{ $ctx.InputPackage.Name }}.{{ $serviceName }}Handler{ /* set up to your liking */ }
//	server := services.New(
//		services.Listen(apis.NewGateway()),
//		services.Register({{ $ctx.OutputPackage.Name }}gen.{{ $serviceFunc }}(serviceHandler)),
//	)
//	server.Listen()
//
// From there, you can add middleware, event sourcing support and more. Look at the abide
// documentation for more details/examples on how to make your service production ready.
func {{ $serviceFunc }}(handler {{ $serviceType }}, middleware ...services.MiddlewareFunc) *services.Service {
	middlewareFuncs := services.MiddlewareFuncs(middleware)

	return &services.Service{
		Name:    "{{ $serviceName }}",
		Version: "{{ .Service.Version }}",
		Handler: handler,
		Endpoints: []services.Endpoint{
		{{ range .Service.Functions }}
			{
				ServiceName: "{{ $serviceName }}",
				Name:        "{{ .Name }}",
				NewInput:    func() services.StructPointer { return &{{ $ctx.InputPackage.Name }}.{{ .Request.Name }}{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*{{ $ctx.InputPackage.Name }}.{{ .Request.Name }})
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.{{ .Name }}(ctx, typedReq)
				}),
				Routes: []services.EndpointRoute{
				{{ range .Routes }}
					{
						GatewayType: "{{ .GatewayType }}",
						Method:      "{{ .Method }}",
						Path:        "{{ .QualifiedPath }}",
						Status:      {{ .Status }},
					},
				{{ end }}
				},
			},
		{{ end }}
		},
	}
}
