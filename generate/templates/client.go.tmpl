// Code generated by Abide - DO NOT EDIT.
//
//   Timestamp: {{ .TimestampString }}
//   Source:    {{ .Path }}
//   Generator: https://github.com/monadicstack/abide
//
package {{ .OutputPackage.Name }}

import (
	"context"

	"github.com/monadicstack/abide/fail"
	"github.com/monadicstack/abide/services/clients"
	"{{ .InputPackage.Import }}"
)

{{ $ctx := . }}
{{ $serviceName := .Service.Name }}
{{ $clientName := (print .Service.UnexportedName "Client") }}
{{ $clientFunc := (print .Service.Name "Client") }}

// {{ $clientFunc }} creates an RPC client that conforms to the {{ $serviceName }} interface, but delegates
// work to remote instances. You must supply the base address of the remote service gateway instance or
// the load balancer for that service. {{ if .Service.Documentation.NotEmpty }}
// {{ range .Service.Documentation }}
// {{ . }}{{ end }}{{ end }}
func {{ $clientFunc }}(address string, options ...clients.ClientOption) {{ .InputPackage.Name }}.{{ $serviceName }} {
	serviceClient := clients.NewClient("{{ $serviceName }}", address, options...)
	return &{{ $clientName }}{Client: serviceClient}
}

// {{ $clientName }} manages all interaction w/ a remote {{ $serviceName }} instance by letting you invoke functions
// on this instance as if you were doing it locally (hence... RPC client). Use the {{ $clientFunc}} constructor
// function to actually get an instance of this client.
type {{ $clientName }} struct {
	clients.Client
}

{{ range .Service.Functions }}
{{ range .Documentation }}
// {{ . }}{{ end }}
func (client *{{ $clientName }}) {{ .Name }} (ctx context.Context, request *{{ $ctx.InputPackage.Name }}.{{ .Request.Name | NoPointer }}) (*{{ $ctx.InputPackage.Name }}.{{ .Response.Name | NoPointer }}, error) {
	{{ $apiRoute := .Routes.API }}
	{{ if $apiRoute }}
	if ctx == nil {
		return nil, fail.Unexpected("precondition failed: nil context")
	}
	if request == nil {
		return nil, fail.Unexpected("precondition failed: nil request")
	}

	response := &{{ $ctx.InputPackage.Name }}.{{ .Response.Name }}{}
	err := client.Invoke(ctx, "{{ $apiRoute.Method }}", "{{ $apiRoute.QualifiedPath }}", request, response)
	return response, err
	{{ else }}
	// Not exposed, so don't bother with a round trip to the server just to get a "not found" error anyway.
	return nil, fail.NotImplemented("{{ .Name }} is not supported in the API gateway")
	{{ end }}
}
{{ end }}
