// Code generated by Abide - DO NOT EDIT.
//
//	Timestamp: Mon, 03 Jul 2023 15:44:52 EDT
//	Source:    sensitive/secret_service.go
//	Generator: https://github.com/monadicstack/abide
package sensitive

import (
	"context"

	"github.com/monadicstack/abide/example/authorization/sensitive"
	"github.com/monadicstack/abide/fail"
	"github.com/monadicstack/abide/services"
)

// SecretServiceServer accepts your "real" SecretService instance (the thing that really does
// the work), and returns a set of endpoint routes which allow this service to be consumed
// via the gateways/listeners you configure in main().
//
//	// Example
//	serviceHandler := sensitive.SecretServiceHandler{ /* set up to your liking */ }
//	server := services.New(
//		services.Listen(apis.NewGateway()),
//		services.Register(sensitivegen.SecretServiceServer(serviceHandler)),
//	)
//	server.Listen()
//
// From there, you can add middleware, event sourcing support and more. Look at the abide
// documentation for more details/examples on how to make your service production ready.
func SecretServiceServer(handler sensitive.SecretService, middleware ...services.MiddlewareFunc) *services.Service {
	middlewareFuncs := services.MiddlewareFuncs(middleware)

	return &services.Service{
		Name:    "SecretService",
		Version: "0.0.1",
		Handler: handler,
		Endpoints: []services.Endpoint{

			{
				ServiceName: "SecretService",
				Name:        "GetGroup",
				NewInput:    func() services.StructPointer { return &sensitive.GetGroupRequest{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*sensitive.GetGroupRequest)
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.GetGroup(ctx, typedReq)
				}),
				Roles: []string{
					"admin.read",
					"group.{ID}.read",
				},
				Routes: []services.EndpointRoute{
					{
						GatewayType: "API",
						Method:      "GET",
						Path:        "/group/{ID}",
						Status:      200,
					},
				},
			},

			{
				ServiceName: "SecretService",
				Name:        "RenameGroup",
				NewInput:    func() services.StructPointer { return &sensitive.RenameGroupRequest{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*sensitive.RenameGroupRequest)
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.RenameGroup(ctx, typedReq)
				}),
				Roles: []string{
					"admin.write",
					"group.{ID}.write",
				},
				Routes: []services.EndpointRoute{
					{
						GatewayType: "API",
						Method:      "PUT",
						Path:        "/group/{ID}/name",
						Status:      200,
					},
				},
			},
		},
	}
}
