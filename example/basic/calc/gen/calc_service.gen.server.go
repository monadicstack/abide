// Code generated by Abide - DO NOT EDIT.
//
//	Timestamp: Mon, 07 Nov 2022 09:02:12 EST
//	Source:    calc/calc_service.go
//	Generator: https://github.com/monadicstack/abide
package calc

import (
	"context"

	"github.com/monadicstack/abide/example/basic/calc"
	"github.com/monadicstack/abide/fail"
	"github.com/monadicstack/abide/services"
)

// CalculatorServiceServer accepts your "real" CalculatorService instance (the thing that really does
// the work), and returns a set of endpoint routes which allow this service to be consumed
// via the gateways/listeners you configure in main().
//
//	// Example
//	serviceHandler := calc.CalculatorServiceHandler{ /* set up to your liking */ }
//	server := services.New(
//		services.Listen(apis.NewGateway()),
//		services.Register(calcgen.CalculatorServiceServer(serviceHandler)),
//	)
//	server.Listen()
//
// From there, you can add middleware, event sourcing support and more. Look at the abide
// documentation for more details/examples on how to make your service production ready.
func CalculatorServiceServer(handler calc.CalculatorService, middleware ...services.MiddlewareFunc) *services.Service {
	middlewareFuncs := services.MiddlewareFuncs(middleware)

	return &services.Service{
		Name:    "CalculatorService",
		Version: "0.0.1",
		Handler: handler,
		Endpoints: []services.Endpoint{

			{
				ServiceName: "CalculatorService",
				Name:        "Add",
				NewInput:    func() services.StructPointer { return &calc.AddRequest{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*calc.AddRequest)
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.Add(ctx, typedReq)
				}),
				Routes: []services.EndpointRoute{

					{
						GatewayType: "API",
						Method:      "GET",
						Path:        "/add/:A/:B",
						Status:      200,
					},
				},
			},

			{
				ServiceName: "CalculatorService",
				Name:        "Double",
				NewInput:    func() services.StructPointer { return &calc.DoubleRequest{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*calc.DoubleRequest)
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.Double(ctx, typedReq)
				}),
				Routes: []services.EndpointRoute{

					{
						GatewayType: "API",
						Method:      "POST",
						Path:        "/double/:Value",
						Status:      200,
					},

					{
						GatewayType: "EVENTS",
						Method:      "ON",
						Path:        "CalculatorService.Mul",
						Status:      0,
					},
				},
			},

			{
				ServiceName: "CalculatorService",
				Name:        "Mul",
				NewInput:    func() services.StructPointer { return &calc.MulRequest{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*calc.MulRequest)
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.Mul(ctx, typedReq)
				}),
				Routes: []services.EndpointRoute{

					{
						GatewayType: "API",
						Method:      "GET",
						Path:        "/multiply/:A/:B",
						Status:      200,
					},
				},
			},

			{
				ServiceName: "CalculatorService",
				Name:        "Sub",
				NewInput:    func() services.StructPointer { return &calc.SubRequest{} },
				Handler: middlewareFuncs.Then(func(ctx context.Context, req any) (any, error) {
					typedReq, ok := req.(*calc.SubRequest)
					if !ok {
						return nil, fail.Unexpected("invalid request argument type")
					}
					return handler.Sub(ctx, typedReq)
				}),
				Routes: []services.EndpointRoute{

					{
						GatewayType: "API",
						Method:      "GET",
						Path:        "/sub/:A/:B",
						Status:      200,
					},
				},
			},
		},
	}
}
